     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  import printf msvcrt.dll
     6                                  import exit msvcrt.dll
     7                                  extern printf, exit
     8                                  
     9                                  
    10                                  %include "baza8.asm"
     1                              <1> %ifndef _BAZA8_ASM_ ; continuăm dacă _FACTORIAL_ASM_ este nedefinit
     2                              <1> %define _BAZA8_ASM_ ; și ne asigurăm că devine definit
     3                              <1>                         ; astfel, %include permite doar o singură includere
     4                              <1>                         
     5                              <1> segment data use32 class=data
     6 00000000 08                  <1>     opt db 8
     7 00000001 0A                  <1>     zece db 10
     8                              <1> segment code use32 class=code
     9                              <1> 
    10                              <1>     imparte:
    11                              <1>         ; ...
    12 00000000 8B442404            <1>         mov eax, [esp+4]
    13                              <1>         
    14 00000004 B101                <1>         mov cl, 1
    15 00000006 BB00000000          <1>         mov ebx, 0
    16                              <1>         
    17                              <1>         sta:
    18 0000000B F635[00000000]      <1>            div byte [opt]
    19 00000011 88C2                <1>            mov dl, al
    20 00000013 88E6                <1>            mov dh, ah
    21                              <1>            
    22 00000015 88F0                <1>            mov al, dh
    23 00000017 F6E1                <1>            mul cl
    24 00000019 B500                <1>            mov ch, 0
    25 0000001B 6601C3              <1>            add bx, ax
    26                              <1>            
    27 0000001E 88C8                <1>            mov al, cl
    28 00000020 F625[01000000]      <1>            mul byte [zece]
    29 00000026 88C1                <1>            mov cl, al
    30                              <1>            
    31 00000028 88D0                <1>            mov al, dl
    32                              <1>            
    33 0000002A 3C00                <1>            cmp al, 0
    34 0000002C 75DD                <1>            jne sta
    35                              <1>            
    36 0000002E C20000              <1>         ret 0
    37                              <1>            
    38                              <1> %endif       
    11                                  
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000002 20                          a db 32
    15 00000003 2564200A00                  format db `%d \n`, 0
    16 00000008 2563200A00                  format2 db `%c \n`, 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                  start:
    21                                     op:
    22                                          ; ...
    23 00000031 B800000000                      mov EAX, 0
    24 00000036 A0[02000000]                    mov al, [a]
    25 0000003B 50                              push eax
    26 0000003C E8BFFFFFFF                      call imparte
    27 00000041 83C404                          add esp, 1*4
    28                                          
    29                                  
    30 00000044 60                              pusha
    31 00000045 53                              push ebx
    32 00000046 68[03000000]                    push format
    33 0000004B FF15[00000000]                  call [printf]
    34 00000051 83C408                          add esp, 2*4
    35 00000054 61                              popa
    36                                          
    37 00000055 60                              pusha
    38 00000056 53                              push ebx
    39 00000057 68[08000000]                    push format2
    40 0000005C FF15[00000000]                  call [printf]
    41 00000062 83C408                          add esp, 2*4
    42 00000065 61                              popa
    43                                          
    44 00000066 8005[02000000]01                add byte [a], 1
    45                                          
    46                                          
    47                                          
    48 0000006D 803D[02000000]7E                cmp byte [a], 126
    49 00000074 76BB                            jna op
    50                                          
    51                                       
    52                                          
    53                                          
    54                                      
    55                                          ; exit(0)
    56 00000076 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000078 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
